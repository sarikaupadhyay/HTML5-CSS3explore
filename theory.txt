HTML - Hypertext markup Language

     - used to create webpages
     - widely used in web
     - Just a markup language not a programming language

Hypertext - Text with in text
          - Way to link two or more pages
          - Click a link takes to new page

Doctype - This tag specifies the language we write on the page

HTML - This tag signals that from here we are going to write HTML code

HEAD - Here we write meta data for the pages mostaly meant for search engines

Body - This is where content of the page goes (headings, images, hyperlinks)

Title- Title of the webpage

Header Tags - <h1>,<h2>,<h3>,<h4>,<h5>,<h6>

HTML Element - Defined by a start tag and we write some content in between and end tag

Some of the elements will have no content and no end tag

<hr> - Horizontal line with no content and no end tag
<br> - Line break which is an Empty element

Only content inside the body section will be displayed in the browser 

Features of HTML
----------------
1. simple and easy to use
2. Platform independent (Windows, Mac, Linux)
3. case insensitive language

Note: Write all the tags in lower-case for consistency and for the better readability

Building Blocks of HTML
-----------------------
Tags -  Surrounds the content and apply meaning to it, write using < and  > brackets

attribute - Provides extra information about the element

<tag attribute-name="attribute-value">

Tags in HTML
--------------
1. Heading Tags - <h1>,<h2>,<h3>,<h4>,<h5>,<h6>
                - <b></b> - bold
                - <i></i> - italic
                - <u></u> - underline

2. Meta Tags - Doctype, title, link, meta, style

style -        <style>
                    .website {
                        color: teal;
                    }
                </style>
link -         <link href="./styles.css" rel="stylesheet">

3. Text Tags - <p>,<h1>..<h6>, <strong><em>
4. Link tags - <a>
5. Image and Area - <img><area>
6. List Tags - <ul>,<ol>,<li>
7. Table tags - table, tr, td . th, thead, tbody
8. Form tags  - <form>, <input>, <textarea>, <select>
9. Scrit tags -  Script and no-Script

HTML Text Tags
----------------
<b> - bold
<i> - italic
<u> - underline
<strong>
<em> - display content in italic
<mark> - to highlight the text that is of relevance
code - Defines a fragment of computer code
<small> - Defines smaller text e.g. copyright or other side-comments
<sup> - Super Script
<sub> - subscript 
<del> - is used to identify text that has been deleted from a document
        but retained to show the history of modification to the document
<ins> - is used when a text that has been inserted into a document
<cite> - Defines title of some creative work 
<q> - Quotation
<abbr> - abbreviation
<address> - To display Address
&nbsp; - used to add space

Link Tags
----------
<a> - achor tag , defines a hyperlink which is used to provide link from one page 
      to other page

      href - Most import attribute of element

      target -  _blank - opens link in a new table_parent, _self, _top

Image Tags
----------
<img> - Will help us to display images
      src - which is source 
      alt - Alternate text

List Tags
---------
UL - Unordered List -> No order is required
OL - Ordered List - Use it when you are listing steps which needs be in order

HTML CSS
---------
CSS - Cascading Stylesheet to format the layout of our webpage
    - with CSS you can control the color, font, size of text, element position,
      background images and background-color

CSS - can be added to HTML document in 3 ways

Inline - by using style attribute inside HTML element
Internal - by using <style> element in <head> section
External - by using <link> element to link external CSS

Javascript execution engines
----------------------------
Chrome - v8
IE - Chakra
Firefox - SpiderMonkey

HTML FORMS
----------
Required when you want to collect some data from the user. 

<form> - used to create HTML form 

1. Text Input controls - Single 
                       - Password
                       - Multiline
2. Checkbox control
3. Radio Box control
4. Select Box control
5. File Select control
6. Hidden Control
7. clickable button
8. Submit and Reset button

Block-level & Inline elements
---------------------------------------

Every element has default display value depending on what type it is 

There are two display values : block and inline

Block-level elements 
---------------------

Block level element occupies the entire space of the parent

Always starts on new line and takes up the full width available 


Inline elements
----------------
It doesn't start on a new line and only takes up as much width as neccessary 

can not add block level elements to inline elements

Block Level Elements         Inline Elements
---------------------        ------------------
H1-H6                          <span>
table                          <a>
p                              <button>
div                            <sup>
form                           <sub>
video                          <textarea>
hr                             <label>                                               
address                        <b>
Header                        <strong>
footer                        <img>

span - An inline element used to mark up a part of a text or part of a document

Label - This is used when we have form or input elements

div - is Always used as a container for other elements
    - defines divison or section in HTML document
    - any sort of content can be put inside <div> tag
    - this is know an DIVISON tag

HTML DOM ( Document Object Model)
---------------------------------
When a page is loaded broswer creates a document object model of the page

Usage : with HTMl DOM javascript can access all the elements of an HTML document, it gets all the power it needs.

       Javascript can add, remove, change all the HTML elements, HTMl attributes, css, styles in the page

       Javascript can react to HTML events and can create new HTML events in the page

Video and Audio Tags
-----------------------
<Video controls autoplay muted>
<Audio controls autoplay muted>

controls - The browser will ofer controls to allow the user to control 
           audio playback, volume , pause/resume

autoplay - This audio will automatically begin playback as soon as it can 
           without waiting for the entire audio file to finish downloading

muted - will mute the audio

HTML Class
----------
HTML class attribute is used to specify a class for an element

multiple HTML elements can share the same class


Padding & margin
-----------------

Padding - is the space between the text and border

margin - is the space between the elements

HTML Responsive Webdesign
---------------------------
Responsive webdesign is about creating webpages that look good in all devices

Will automatically adjust for different screen sizes and viewports

to crete responsive website we need <meta> tag

<meta name="viewport" content="width=device-width, Initial-scale=1.0">

meta - This will set the viewport of our page which will give instructions to browser 
       on how to control page's deminesion and scaling

viewport - This is user's vivisible are of the webpage.
           This varies with device.
           This will be smaller on mobile phone and larger on computer screen 

Initial-scale - Governs the zoom level when page is loaded for the first time.


Semantic Elements
-----------------
Elements with meaning 

Semantic 
---------
<article> - specifies independent, self-contained content
<aside> - defines some content aside from the content it is placed in
<details> - specifies additional details that the user can 
            open and close on demand
<figure>
<header>
<footer>
<main>
<mark>
<nav>
<section>
<summary>
<time>

Non Semantic Eelemnts
-----------------------
<div>
<span>
<p>

CSS3
-----
1. Bring Superior styling to HTML
2. Multiple Device Compatibility
3. Follows Global WebStandrads
4. Easy maintainance 

New Features
------------
new selectors - Better selection of HTML elements
Shadow Effects - Box-shadow, text shadow
Rounded Corners - Easily Round the corners of images and block level elements
Opacity - Trasaprency 
Gradients - Using Multiple colors at the same times


COLORS
--------
Standard COLORS
HTML5 Colors 
Hexadecimal 
RGB - RED GREEN BLUE

Combinator Selectors
--------------------
Which explains the relationship between Selectors

1. descendent selector (space)
2. child selector (>)
3. adjacent selector + 
4. general sibling selctor (~)


Introduction
Hoisting
Types
Primitive Types
functions
Objects
arrays
this
Bind call apply
Closures
Scope of Objects
Class
Inheritance
Prototypes
Polymorphism
Error Handling
Singleton
Module Pattern


JavaScript 
-----------
Javascript is a programming language that allows us to implement complex
features on web pages

HTML - is the markup language that we use to structure and give meaning to our 
       web content

CSS - is a language of style rules that we used to apply styling to our HTML Cotent

JavaScript - is scripting language that enables you to create dynamically 
             updating content


Syntax Parser
-------------
A program that reads your code and determines what it does and if its grammar is valid

Lexical Environment
-------------------
Where something sits physically, in the code we write

Execution Context
-----------------
A wrapper to help manage the code that is running

lexical 1  -
lexical 2
lexical 3

for e.g There are lots of lexical environments which one is currently 
        running is managed by execution context

Name/Value pairs
------------------
A name which mapes to a unique value (name: 'uma')

Object
-------
A collection of these name value pairs

Global environment and Global Object
------------------------------------
When ever code is running in javascript it runs inside an execution context 

Execution Context (Global)   
-------------------------

Global Object   // javascript execution engine creating these two things for us
this 

this - window ( this browser window)
Global Object - window

Global -  means not inside the function

Hoisting
---------
When you declare variables and functions in javascript, the execution 
engine sets up a memory space for variables and functions.

1. If it is a a variable it will keep that variable in memory and assign 
   a default value called `undefined`

2. If it is a function it will copy entire function and keeps in memory 



1. find out all the variables and functions in the code file

a = undefined
function b() {
    console.log('called b')
}

2. executing the code 

This phenomenon is called hoisting


undefined 
----------
Special value in javascript which takes up memory space

Warning : Never ever declare  a variable undefined, because 
          it is difficult to find value is 'undefined' because
          we set it or javascript execution engine set it up


Types 
--------
Dynamic Typing
--------------
you don't tell the engine what type of data a variabe holds,
it figures out while your code running.

Strict Typing
-------------
C# or java follows script typing

Prmitive Types
-----------------
A type of data that represents a  single value is called primitive data type

1. undefined - this represents lack of existance ( we should never use this)
2. null - this represents lack of existance ( we can set this to a variable)
3. Boolean - true or false
4. number - integer/floating type(decimal)
5. string - a sequence of characters
6. Symbol - used in ES6

Anything which is not primitive is an Object in javascript

object 
function
array
Date
RegularExpression

Functions
--------------

Function is a block of code wrapped around flower brackets and invocated later

function functionname(){

}

1. Regular Functions
2. Anonymous Functions
3. Immediately Invoked Functions ( IIFs)

First Class Functions
-------------------
1. can be Invoked inside another function
2. assign to a variable
3. passed as a parameter to another variable

Advantages with IIFs 
--------------------
1. will not create unnecessary gloabal variables and functions
2. functions and variables defined don not conflict


Objects
--------
An Object is a collection of key value pairs

1. using New Object()
2. using Object Literal {}
3. using Object.create()
4. Construtor function

Object.create() method creates a new object using an existing 
object or null as the protoype for newly created Object

var person = Object.create(null) // create an empty/null object
var person = Object.create({}) // create a normal function


JSON
-------
JavaScript Object Notation

JSON is Inspired by the object literal notation {}

<data>
    <firstname>uma</firstname>
    <lastName>Mahesh</lastName>
</data>

JSON
------
common usage of JSON is to exchange data to/from web servers
When sending data to a webserver that data has to be string 

{   
    "firstname": "uma",
    "lastName": "Mahesh"
}

Object
---------
{   
    firstname: "uma",
    lastName: "Mahesh"
}

properties have to be wrapped in double quotes (" ") for JSON

Anything which is JSON valid is valid in object literal


JSON.stringify - converts a javascript value into seriazlied string 

JSOn.parser - deserialzes a JSON String to a JSON Object

arrays
-------
An array is an object that can store a collection of items

Useful when you want to store large amount of data


var students = ["Shanthanu", "Sunitha" , "Surekha", "Prdeep"]

var people = new Array("Uma", "Swathi", "Jagrav", "Manasvi)

In javascript arrays are object types with special constructor

var array = new Array(3) - length 
var array  = new Array(100000) - length will not create any memory

array index starts from zero

this
-----
If function is outside then 'this' becomes global object
if function is inside an object then 'this' becomes that object

Closure 
----------
Inner functions having access to the variables of outer functions

Bind vs call vs apply
-----------------------

** if you pass primitive values through bind it will covert them to object type

bind - sets `this` keyword and creates a copy of that function

call -  sets `this` keyword and execute the function immediately and 
        doesn't create a new copy of the function. it takes comma seperated values

apply - sets `this` keyword, similar to call but the difference is apply accepts
        an array of arguments instead comma seperated values


The call, bind and apply methods can be used to set `this` keyword 
independent of how function is called

Class 
-----
Javascript is a prototype-based language which contains no class statement 
such as is found in C# or Java

Javascript uses function as a class

e.g. 

function Student(){

}

instance
--------
To create instance of the class

function Person(){

}

var person1 = new Person();

var person2 = new Person();

constructor
-----------

function Order(){
    console.log('Order is placed')
}

var order = new Order(); // Order() is called constructor

Properties
----------
function Customer(gender){
    this.gender = gender
}


var customer1 = new Customer('Female')
var customer2 = new Customer('Male')


Prototype
----------

The prototype is an object that is associated with 
every functions and objects by default in javascript

This is special type of obejct to which additional properties and methods can be attached.
Which will be shared acorss all the instnaces of its contsructor function

Usages
------
1. extend properties and methods of an object
2. To implement inheritance

Object 'prototype'
-----------------
Every Object which is created using object literal syntax or constructor syntax 
with new keyword includes __proto__ property that points to prortotype object of
a function that created this Object

Inheritance 
-----------------------
One Object gets access to the properties and methods of another object.

In Javascript inherirtance is supported by using prototype object. 
This is also called prototypal inheritance.

Polymorphism 
-------------

Means function existing in many forms. 

In programming, the ability for objects to present the same interface 
for different behaviour

Error Handling
---------------
Helps us to handle the errors (runtime), for accessing undefined variables 
or undefined functions

try- catch-finally block

try {
    // code that may or may not throws error
}
catch {
    // code to be executed if an error occurs
}
finally {
    // code to be executed regardless of an error occurs or not
}

Singleton Design Pattern
------------------------

Limits the number of instnaces of a perticular object to just one. This single instance
is called the Singleton.

Singletons are useful in stuations where system wide actions need to be coorodinated 
from a single Central place

E.g  Database Connection pool

The pool that manages the creation, destruction and lifetime of all database connections
for the entire application


Module Pattern
---------------
Deals with code encapsulation. It is used to create private public properties


code encapsulation
-------------------

var person = function(){
    var name =  'uma'
}
